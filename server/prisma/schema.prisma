datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output = "../../docs"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../../ERD.png"
  theme = "forest"
}

model User {
  firstName         String?
  housingApplicants HousingApplicant[]
  housingOfferings  HousingOffering[]
  id                String             @id @default(cuid())
  jobApplicants     JobApplicant[]
  jobOfferings      JobOffering[]
  lastName          String?
  location          String?
  mail              String?
  password          String
  roles             String[]
  telephoneNumber   String?
  username          String             @unique
}

model JobOffering {
  author        User                          @relation(fields: [authorId], references: [id])
  authorId      String
  city          String
  createdAt     DateTime                      @default(now())
  description   String?
  id            String                        @id @default(cuid())
  jobApplicants JobApplicant[]
  maxSalary     Int
  minSalary     Int
  positionLevel EnumJobOfferingPositionLevel?
  title         String
  workingMode   EnumJobOfferingWorkingMode
}

model JobApplicant {
  createdAt     DateTime    @default(now())
  id            String      @id @default(cuid())
  isAccepted    Boolean
  jobOffering   JobOffering @relation(fields: [jobOfferingId], references: [id])
  jobOfferingId String
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

model HousingOffering {
  address           String
  author            User               @relation(fields: [authorId], references: [id])
  authorId          String
  city              String
  createdAt         DateTime           @default(now())
  description       String
  housingApplicants HousingApplicant[]
  id                String             @id @default(cuid())
  price             Int
  roomsNumber       Int
  size              Float
  title             String
  updatedAt         DateTime           @updatedAt
}

model HousingApplicant {
  author            User?           @relation(fields: [authorId], references: [id])
  authorId          String?
  createdAt         DateTime        @default(now())
  housingOffering   HousingOffering @relation(fields: [housingOfferingId], references: [id])
  housingOfferingId String
  id                String          @id @default(cuid())
  isAccepted        Boolean?
  updatedAt         DateTime        @updatedAt
}

enum EnumJobOfferingPositionLevel {
  Junior
  Mid
  Senior
}

enum EnumJobOfferingWorkingMode {
  Remote
  Onsite
  Hybrid
}
